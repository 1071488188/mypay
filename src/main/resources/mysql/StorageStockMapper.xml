<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.har.unmanned.mfront.dao.StorageStockMapper" >
  <resultMap id="BaseResultMap" type="com.har.unmanned.mfront.model.StorageStock" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="storage_id" property="storageId" jdbcType="INTEGER" />
    <result column="goods_id" property="goodsId" jdbcType="BIGINT" />
    <result column="quantity" property="quantity" jdbcType="INTEGER" />
    <result column="initial_quantity" property="initialQuantity" jdbcType="INTEGER" />
    <result column="initial_time" property="initialTime" jdbcType="TIMESTAMP" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="min_quantity" property="minQuantity" jdbcType="INTEGER" />
    <result column="buy_base_quantity" property="buyBaseQuantity" jdbcType="INTEGER" />
    <result column="buy_quantity" property="buyQuantity" jdbcType="INTEGER" />
    <result column="storage_location" property="storageLocation" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, storage_id, goods_id, quantity, initial_quantity, initial_time, create_time, 
    min_quantity, buy_base_quantity, buy_quantity, storage_location, `status`
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.har.unmanned.mfront.model.StorageStockExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from storage_stock
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from storage_stock
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from storage_stock
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.har.unmanned.mfront.model.StorageStockExample" >
    delete from storage_stock
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.har.unmanned.mfront.model.StorageStock" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into storage_stock (storage_id, goods_id, quantity, 
      initial_quantity, initial_time, create_time, 
      min_quantity, buy_base_quantity, buy_quantity, 
      storage_location, `status`)
    values (#{storageId,jdbcType=INTEGER}, #{goodsId,jdbcType=BIGINT}, #{quantity,jdbcType=INTEGER}, 
      #{initialQuantity,jdbcType=INTEGER}, #{initialTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}, 
      #{minQuantity,jdbcType=INTEGER}, #{buyBaseQuantity,jdbcType=INTEGER}, #{buyQuantity,jdbcType=INTEGER}, 
      #{storageLocation,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.har.unmanned.mfront.model.StorageStock" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into storage_stock
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="storageId != null" >
        storage_id,
      </if>
      <if test="goodsId != null" >
        goods_id,
      </if>
      <if test="quantity != null" >
        quantity,
      </if>
      <if test="initialQuantity != null" >
        initial_quantity,
      </if>
      <if test="initialTime != null" >
        initial_time,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="minQuantity != null" >
        min_quantity,
      </if>
      <if test="buyBaseQuantity != null" >
        buy_base_quantity,
      </if>
      <if test="buyQuantity != null" >
        buy_quantity,
      </if>
      <if test="storageLocation != null" >
        storage_location,
      </if>
      <if test="status != null" >
        `status`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="storageId != null" >
        #{storageId,jdbcType=INTEGER},
      </if>
      <if test="goodsId != null" >
        #{goodsId,jdbcType=BIGINT},
      </if>
      <if test="quantity != null" >
        #{quantity,jdbcType=INTEGER},
      </if>
      <if test="initialQuantity != null" >
        #{initialQuantity,jdbcType=INTEGER},
      </if>
      <if test="initialTime != null" >
        #{initialTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="minQuantity != null" >
        #{minQuantity,jdbcType=INTEGER},
      </if>
      <if test="buyBaseQuantity != null" >
        #{buyBaseQuantity,jdbcType=INTEGER},
      </if>
      <if test="buyQuantity != null" >
        #{buyQuantity,jdbcType=INTEGER},
      </if>
      <if test="storageLocation != null" >
        #{storageLocation,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.har.unmanned.mfront.model.StorageStockExample" resultType="java.lang.Integer" >
    select count(*) from storage_stock
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update storage_stock
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.storageId != null" >
        storage_id = #{record.storageId,jdbcType=INTEGER},
      </if>
      <if test="record.goodsId != null" >
        goods_id = #{record.goodsId,jdbcType=BIGINT},
      </if>
      <if test="record.quantity != null" >
        quantity = #{record.quantity,jdbcType=INTEGER},
      </if>
      <if test="record.initialQuantity != null" >
        initial_quantity = #{record.initialQuantity,jdbcType=INTEGER},
      </if>
      <if test="record.initialTime != null" >
        initial_time = #{record.initialTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.minQuantity != null" >
        min_quantity = #{record.minQuantity,jdbcType=INTEGER},
      </if>
      <if test="record.buyBaseQuantity != null" >
        buy_base_quantity = #{record.buyBaseQuantity,jdbcType=INTEGER},
      </if>
      <if test="record.buyQuantity != null" >
        buy_quantity = #{record.buyQuantity,jdbcType=INTEGER},
      </if>
      <if test="record.storageLocation != null" >
        storage_location = #{record.storageLocation,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null" >
        `status` = #{record.status,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update storage_stock
    set id = #{record.id,jdbcType=BIGINT},
      storage_id = #{record.storageId,jdbcType=INTEGER},
      goods_id = #{record.goodsId,jdbcType=BIGINT},
      quantity = #{record.quantity,jdbcType=INTEGER},
      initial_quantity = #{record.initialQuantity,jdbcType=INTEGER},
      initial_time = #{record.initialTime,jdbcType=TIMESTAMP},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      min_quantity = #{record.minQuantity,jdbcType=INTEGER},
      buy_base_quantity = #{record.buyBaseQuantity,jdbcType=INTEGER},
      buy_quantity = #{record.buyQuantity,jdbcType=INTEGER},
      storage_location = #{record.storageLocation,jdbcType=VARCHAR},
      `status` = #{record.status,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.har.unmanned.mfront.model.StorageStock" >
    update storage_stock
    <set >
      <if test="storageId != null" >
        storage_id = #{storageId,jdbcType=INTEGER},
      </if>
      <if test="goodsId != null" >
        goods_id = #{goodsId,jdbcType=BIGINT},
      </if>
      <if test="quantity != null" >
        quantity = #{quantity,jdbcType=INTEGER},
      </if>
      <if test="initialQuantity != null" >
        initial_quantity = #{initialQuantity,jdbcType=INTEGER},
      </if>
      <if test="initialTime != null" >
        initial_time = #{initialTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="minQuantity != null" >
        min_quantity = #{minQuantity,jdbcType=INTEGER},
      </if>
      <if test="buyBaseQuantity != null" >
        buy_base_quantity = #{buyBaseQuantity,jdbcType=INTEGER},
      </if>
      <if test="buyQuantity != null" >
        buy_quantity = #{buyQuantity,jdbcType=INTEGER},
      </if>
      <if test="storageLocation != null" >
        storage_location = #{storageLocation,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        `status` = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.har.unmanned.mfront.model.StorageStock" >
    update storage_stock
    set storage_id = #{storageId,jdbcType=INTEGER},
      goods_id = #{goodsId,jdbcType=BIGINT},
      quantity = #{quantity,jdbcType=INTEGER},
      initial_quantity = #{initialQuantity,jdbcType=INTEGER},
      initial_time = #{initialTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      min_quantity = #{minQuantity,jdbcType=INTEGER},
      buy_base_quantity = #{buyBaseQuantity,jdbcType=INTEGER},
      buy_quantity = #{buyQuantity,jdbcType=INTEGER},
      storage_location = #{storageLocation,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>